import pandas as pd

rule all:
	input:
		config['SHORTBRED']['ALL']

# ShortBred

def shortbredGetReads(wildcards):
	return ' '.join(config['READS'][wildcards.sample])

rule shortbred_single:
	input: shortbredGetReads
	output: '{sample}'+config['SHORTBRED']['EXT']
	params:
		ref=config['SHORTBRED']['DB'],
		shortbred=config['SHORTBRED']['EXC'],
		tmp=config['TMP_DIR'],
	threads: config['SHORTBRED']['THREADS']
	shell:
		'{params.shortbred} --markers {params.ref} --wgs {input.reads} '
		'--results {output} --threads {threads} --tmp {params.tmp}'

rule shortbred_all:
	input:
		expand('{sample}'+config['SHORTBRED']['EXT'],sample=config['SAMPLES'])
	output:
		config['SHORTBRED']['ALL']
	params:
		ext=config['SHORTBRED']['EXT']
	run:
		cols = {}
		for resultf in input:
			sample = resultf.split(params.ext)[0]
			r = pd.read_csv(resultf,sep='\t',index_col=0)
			cols[sample] = r['Count']
		df = pd.concat(cols,axis=1)
		with open(output, 'w') as oF:
			 oF.write(df.to_string())							  

# MetaPhlAn2

def metaphlan2GetReads(wildcards):
        return ','.join( config['READS'][wildcards.sample])

rule metaphlan2_single:
    input: metaphlan2GetReads
    output: '{sample}' + config['METAPHLAN2']['EXT']
    threads: config['METAPHLAN2']['THREADS']
    params:
        metaphlan2=config['METAPHLAN2']['EXC']
    shell:
	'{params.metaphlan2} {input} --nproc {threads} > {output}'

# HUMANN

rule humann_blastx:
    input:
    output: '{sample}.humann.blasttab.gz'
    params:
        db=config['HUMANN']['DB']
    shell:
        'blastx | gzip > {output}'


