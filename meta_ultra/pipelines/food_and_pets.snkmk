import meta_ultra.api as api

def food_and_pets_output(wildcards):
	tools = config['TOOLS_TO_RUN']
	inp = []
	dataSamplePairs=[]
	for sampleName, dataRecords in config['SAMPLES'].items():
		for dataName, dataConf in dataRecords.items():
			dataType = DataType.asDataType(dataConf['DATA_TYPE'])
			if dataType in [DataType.WGS_DNA_SEQ_SINGLE_END, DataType.WGS_DNA_SEQ_PAIRED_END]:
				dataSamplePairs.append( (sampleName, dataConf['DATA_NAME']))

	if 'FOOD_PETS' in tools:
		pattern = config['OUTPUT_DIR']+'{sample}.{data_name}.food_and_pets.json.registered'
		for sample, data in dataSamplePairs:
			inp.append( pattern.format(sample=sample, data_name=data))
	return inp

output_builders.append( food_and_pets_output)

rule blast_vs_food_and_pets:
	input:	
		clean = getNotHostReads
	output:	
		main=config['OUTPUT_DIR'] + '{sample}.{data_name}.food_and_pets.json'
	threads: int(config['FOOD_PETS']['THREADS'])
	resources:
		time=int(config['FOOD_PETS']['TIME']),
		n_gb_ram=int(config['FOOD_PETS']['RAM'])
	params:
		db=config['FOOD_PETS']['DB']['FILEPATH'],
		blastn=config['BLASTN']['EXC']['FILEPATH'],
		counter=config['FOOD_PETS']['COUNT_SCRIPT']['FILEPATH'],
		job_name=config['JOB_NAME_PREFIX'] + '{sample}_{data_name}_blast_food_pets',
		sname='{sample}',
		data_name='{data_name}',
		fastq2fasta=config['FOOD_PETS']['FASTQ_TO_FASTA']['FILEPATH']
	run:
		dataType = getDataType(params.sname, params.data_name)
		if dataType in [ DataType.WGS_DNA_SEQ_SINGLE_END, DataType.WGS_DNA_SEQ_PAIRED_END]:
			cmd =('rsync -av {input.clean[0]} $TMPDIR && '+
      				'rsync -av `dirname {params.db}` $TMPDIR && '+
      				'READF=${{TMPDIR}}/`basename {input.clean[0]}` && '+
                              	'BLASTOUT=${{TMPDIR}}/food_and_pets_temp_blast_out && '+
                              	'BLASTDB=`dirname {params.db}` && '+
                              	'BLASTDB=${{TMPDIR}}/`basename $BLASTDB`/`basename {params.db}` && '+
                              	'zcat $READF | '+
                              	'{params.fastq2fasta} | '+
      				'{params.blastn} '+
      				'-db $BLASTDB '+
      				'-out $BLASTOUT '+
      				'-outfmt 6 '+
      				'-max_target_seqs 1 '+
      				'-evalue 1e-5 '+
      				'-qcov_hsp_perc 90 '+
      				'-num_threads {threads} && '+
      				'{params.counter} '+
      				'$BLASTOUT '+
      			      	'{params.sname} '+
      				'`zcat $READF | wc -l` > '+
      				'{output.main}') # this is tiny so we shouldn't need to copy back and forth

			shell(cmd)

localrules: register_blast_food_pets

rule register_blast_food_pets:
	input:
		inp=config['OUTPUT_DIR'] + '{sample}.{data_name}.food_and_pets.json'
	output:
		flag=config['OUTPUT_DIR'] + '{sample}.{data_name}.food_and_pets.json.registered'
	params:
		conf_name=config['NAME'],
		sample_name='{sample}',
		data_name='{data_name}',
		exp_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['EXPERIMENT_NAME'],
		proj_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['PROJECT_NAME'],
	run:
		module = 'food_and_pets'
		name = '{}_{}'.format(params.data_name, module)
		try:
			api.saveResult( name,
					module,
					[input.inp],
					params.data_name,
					params.conf_name,
					params.sample_name,
					params.exp_name,
					params.proj_name
				)
		except RecordExistsError:
			pass
		open(output.flag,'a').close()




