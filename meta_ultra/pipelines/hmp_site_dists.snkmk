import meta_ultra.api as api

def hmp_output(wildcards):
        return standardOutputFileBuilder(hmpFlagPattern,
                                         DataType.SR_WMGS_DNA_SINGLE_END,
                                        DataType.SR_WMGS_DNA_PAIRED_END,
                                        DataType.LR_WMGS_ONT_DNA)
output_builders.append( hmp_output)

rule hmp_dists:
	input:
		mpa=mp2Pattern,
	output:
		main=hmpPattern
	resources:
		time=1,
		n_gb_ram=2
	threads: 1
	params:
		script=config['HMP_SITE_DISTS']['EXC']['FILEPATH'],
		job_name=jobName('hmp-site-dists')
	shell:
		'{params.script} {input.mpa} > {output.main}'

localrules: register_hmp_dists

rule register_hmp_dists:
	input:
		inp=hmpPattern
	output:
		flag=hmpFlagPattern
	params:
		conf_name=config['NAME'],
		sample_name='{sample}',
		data_name='{data_name}',
		exp_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['EXPERIMENT_NAME'],
		proj_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['PROJECT_NAME'],
	run:
		module = 'hmp_site_dists'
		name = '{}_{}'.format(params.data_name, module)
		try:
			api.saveResult( name,
				module,
				[input.inp],
				params.data_name,
				params.conf_name,
				params.sample_name,
				params.exp_name,
				params.proj_name
			)
		except RecordExistsError:
			pass
		open(output.flag,'a').close()
