

def metaphlan2_output(wildcards):
	tools = config['TOOLS_TO_RUN']
	inp = []
        dataNames=[]
        for dataConf in config['SAMPLES'].values():
                dataType = DataType.asDataType(dataConf['DATA_TYPE'])
                if dataType in [DataType.WGS_DNA_SEQ_SINGLE_END, DataType.WGS_DNA_SEQ_PAIRED_END]:
                        dataNames.append(dataConf['DATA_NAME'])

	if 'METAPHLAN2' in tools:
		inp += expand(config['OUTPUT_DIR']+'{sample}.{data_name}.'+config['METAPHLAN2']['EXT'],
                              sample=config['SAMPLES'].keys(),
                              data_name=dataNames,
                )
	return inp

output_builders.append( metaphlan2_output)

rule metaphlan2_single_sample:
	input:
		reads = getReads
	output:
		main=config['OUTPUT_DIR']+'{sample}.{data_name}.'+config['METAPHLAN2']['EXT'],
		bt2='{sample}.{data_name}.' + config['METAPHLAN2']['EXT'] + '.bt2'
	threads: int(config['METAPHLAN2']['THREADS'])
	version: config['METAPHLAN2']['VERSION']
	params:
		metaphlan2=config['METAPHLAN2']['EXC'],
		job_name=config['JOB_NAME_PREFIX'] + 'metaphlan2_single_sample_{sample}_{data_name}',
	resources:
		time=int(config['METAPHLAN2']['TIME']),
		n_gb_ram=int(config['METAPHLAN2']['RAM'])

	run:
		dataType = getDataType(params.sample_name, params.data_name)
		if DataType.WGS_DNA_SEQ_PAIRED_END:
			cmd = ('{params.metaphlan2} --input_type fastq ${{I0}},${{I1}}'
                               ' --nproc {threads} --bowtie2out ${{TMPDIR}}/{output.bt2} > ${{O0}}')
                        cmd = loadFiles([input.reads[0], input.reads[1]], [output.main], cmd, 'TMPDIR')  
		elif DataType.WGS_DNA_SEQ_SINGLE_ENDED:
			cmd = ('{params.metaphlan2} --input_type fastq ${{I0}}'
                               ' --nproc {threads} --bowtie2out ${{TMPDIR}}/{output.bt2} > ${{O0}}')
                        cmd = loadFiles([input.reads[0]], [output.main], cmd, 'TMPDIR')  
		shell(cmd)


