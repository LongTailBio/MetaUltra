from meta_ultra.api import api

def metaphlan2_output(wildcards):
	tools = config['TOOLS_TO_RUN']
	inp = []
	dataNames=[]
	for sampleName, sampleInfo in config['SAMPLES'].items():
		for dataName, dataConf in sampleInfo.items():
			dataType = DataType.asDataType(dataConf['DATA_TYPE'])
			if dataType in [DataType.WGS_DNA_SEQ_SINGLE_END, DataType.WGS_DNA_SEQ_PAIRED_END]:
				dataNames.append((sampleName, dataConf['DATA_NAME']))

	if 'METAPHLAN2' in tools:
                pattern = config['OUTPUT_DIR']+'{sample}.{data_name}.'+config['METAPHLAN2']['EXT']+'.registered'
                for sample, data in dataNames:
                        inp.append( pattern.format(sample=sample, data_name=data))

	return inp

output_builders.append( metaphlan2_output)

rule metaphlan2_single_sample:
	input:
		reads = getReads
	output:
		main=config['OUTPUT_DIR']+'{sample}.{data_name}.'+config['METAPHLAN2']['EXT'],
	threads: int(config['METAPHLAN2']['THREADS'])
	params:
            	sample_name = lambda wc: wc.sample,
                data_name = lambda wc: wc.data_name,
		metaphlan2=config['METAPHLAN2']['EXC']['FILEPATH'],
		job_name=config['JOB_NAME_PREFIX'] + 'metaphlan2_single_sample_{sample}_{data_name}',
	resources:
		time=int(config['METAPHLAN2']['TIME']),
		n_gb_ram=int(config['METAPHLAN2']['RAM'])

	run:
		dataType = getDataType(params.sample_name, params.data_name)
		if dataType == DataType.WGS_DNA_SEQ_PAIRED_END:
			cmd = ('{params.metaphlan2} --input_type fastq ${{I0}},${{I1}}'
			       ' --nproc {threads} --bowtie2out ${{O0}}.bt2 > ${{O0}}')
			cmd = loadFiles([input.reads[0], input.reads[1]], [output.main], cmd)	 
		elif dataType == DataType.WGS_DNA_SEQ_SINGLE_END:
			cmd = ('{params.metaphlan2} --input_type fastq ${{I0}}'
			       ' --nproc {threads} --bowtie2out ${{O0}}.bt2 > ${{O0}}')
			cmd = loadFiles([input.reads[0]], [output.main], cmd)	 
		shell(cmd)

localrules: register_metaphlan2_single_sample
                
rule register_metaphlan2_single_sample:
	input:
		inp=config['OUTPUT_DIR']+'{sample}.{data_name}.'+config['METAPHLAN2']['EXT']
	output:
		flag=config['OUTPUT_DIR']+'{sample}.{data_name}.'+config['METAPHLAN2']['EXT'] + '.registered'
	params:
		conf_name=config['NAME'],
		sample_name='{sample}',
		data_name='{data_name}',
		exp_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['EXPERIMENT_NAME'],
		proj_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['PROJECT_NAME'],
	run:
		module = 'metaphlan2'
		name = '{}_{}'.format(params.data_name, module)
		api.saveResult( name,
				module,
				[input.inp],
				params.data_name,
				params.conf_name,
				params.sample_name,
				params.exp_name,
				params.proj_name
		)
		open(output.flag,'a').close()
