import meta_ultra.api as api

countPattern= prependOutputDir('{sample}.{data_name}.reads_classified.json')
finalPattern = countPattern + '.registered'

def count_classified_output(wildcards):
        return standardOutputFileBuilder(finalPattern,
                                         DataType.SR_WMGS_DNA_SINGLE_END,
                                         DataType.SR_WMGS_DNA_PAIRED_END,
                                         DataType.LR_WMGS_ONT_DNA)

output_builders.append( count_classified_output)

rule count_classified_reads:
	input:
		host=getHostReads,
		nothost=getNotHostReads,
		krakenmpa=krakenPattern
	output:
		main=countPattern
	params:
		script=config['COUNT_CLASSIFIED']['EXC']['FILEPATH'],
		job_name=jobName('count-classified-reads')
	resources:
		time=1,
		n_gb_ram=2
	threads: 1
	shell:
		'{params.script} {input.host[0]} {input.nothost[0]} {input.krakenmpa} > {output.main}'

localrules: register_count_classified_reads
                
rule register_count_classified_reads:
	input:
		inp=countPattern
	output:
		flag=finalPattern
	params:
		conf_name=config['NAME'],
		sample_name='{sample}',
		data_name='{data_name}',
		exp_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['EXPERIMENT_NAME'],
		proj_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['PROJECT_NAME'],
	run:
		module = 'classify_reads'
		name = '{}_{}'.format(params.data_name, module)
		try:
			api.saveResult( name,
				module,
				[input.inp],
				params.data_name,
				params.conf_name,
				params.sample_name,
				params.exp_name,
				params.proj_name
			)
		except RecordExistsError:
			pass
		open(output.flag,'a').close()










