import meta_ultra.api as api

def host_vcf_output(wildcards):
	tools = config['TOOLS_TO_RUN']
	inp = []
        allowedDataTypes = [DataType.WGS_DNA_SEQ_SINGLE_END, DataType.WGS_DNA_SEQ_PAIRED_END]
	dataSamplePairs=[]
	for sampleName, dataRecords in config['SAMPLES'].items():
		for dataName, dataConf in dataRecords.items():
			dataType = DataType.asDataType(dataConf['DATA_TYPE'])
			if dataType in allowedDataTypes:
				dataSamplePairs.append( (sampleName, dataConf['DATA_NAME']))

	if 'HOST_VCF' in tools:
		pattern=config['OUTPUT_DIR']+'{sample}.{data_name}.host.vcf.registered'
		for sample, data in dataSamplePairs:
			inp.append( pattern.format(sample=sample, data_name=data))
	return inp

output_builders.append( host_vcf_output)

def getBam(wc):
        sample_name=wc.sample
	data_name=wc.data_name
        dataType = getDataType(sample_name, data_name)

        if dataType == DataType.WGS_DNA_SEQ_SINGLE_END:
                return config['OUTPUT_DIR']+sample_name+'.'+data_name+'.single_host.bam' # from filter host
        elif dataType == DataType.WGS_DNA_SEQ_PAIRED_END:
                return config['OUTPUT_DIR']+sample_name+'.'+data_name+'.paired_host.bam' # from filter host

        
rule sort_bam_single:
    	input:
            	bam=getBam
	output:
		sortedbam=temp(config['OUTPUT_DIR']+'{sample}.{data_name}.sorted.host.bam')
	threads: 1
	params:
		samtools = config['SAMTOOLS']['EXC']['FILEPATH'],
		job_name=config['JOB_NAME_PREFIX'] + 'sort_host_bam_{sample}_{data_name}',
	resources:
		time=int(config['HOST_VCF']['SORT_TIME']),
		n_gb_ram=int(config['HOST_VCF']['SORT_RAM'])
	run:
		cmd = '{params.samtools} sort -o $O0 $I0'
                cmd = loadFiles([input.bam], [output.sortedbam], cmd)
                shell(cmd)

localrules: read_group_bam

rule read_group_bam:
	input:
		bam=config['OUTPUT_DIR']+'{sample}.{data_name}.sorted.host.bam'
	output:
		bam=config['OUTPUT_DIR']+'{sample}.{data_name}.rg_sorted.host.bam'
	threads: 1
	shell:
		'picard AddOrReplaceReadGroups -XX:ParallelGCThreads=1 I={input.bam} O={output.bam} RGLB=lib1 RGPL=illumina RGPU=unit1 RGSM=11'


rule freebayes_generate_regions:
	input:
                genome=config['HOST_VCF']['DB']['FILEPATH']
	output:
		main = temp(config['OUTPUT_DIR']+'{sample}.{data_name}.host.regions')
	threads: 1
	params:
                generate_regions= config['HOST_VCF']['GENERATE_REGIONS']['FILEPATH'],
		job_name=config['JOB_NAME_PREFIX'] + 'freebayes_generate_regions_{sample}_{data_name}',
	resources:
		time=int(config['HOST_VCF']['FREEBAYES_TIME']),
		n_gb_ram=int(config['HOST_VCF']['FREEBAYES_RAM'])
	run:
		cmd = '{params.generate_regions} $I0 100000 > $O0'
                cmd = loadFiles([input.genome +'.fai'], [output.main], cmd)
                shell(cmd)

                
rule freebayes_single_sample:
	input:
		bam=config['OUTPUT_DIR']+'{sample}.{data_name}.rg_sorted.host.bam',
                genome=config['HOST_VCF']['DB']['FILEPATH'],
#                regions=config['OUTPUT_DIR']+'{sample}.{data_name}.host.regions'
	output:
		main = config['OUTPUT_DIR']+'{sample}.{data_name}.host.vcf'
	threads: 1
	version: config['HOST_VCF']['EXC']['VERSION']
	params:
		freebayespar = config['HOST_VCF']['EXC']['FILEPATH'],
                generate_regions= config['HOST_VCF']['GENERATE_REGIONS']['FILEPATH'],
		job_name=config['JOB_NAME_PREFIX'] + 'freebayes_single_sample_{sample}_{data_name}',
	resources:
		time=int(config['HOST_VCF']['FREEBAYES_TIME']),
		n_gb_ram=int(config['HOST_VCF']['FREEBAYES_RAM'])
	run:
		cmd = '{params.freebayespar} ' #$I1 {threads} '
                cmd += '-f $I0  $I1 > $O0'
                cmd = loadFiles([input.genome, input.bam], [output.main], cmd)
                shell(cmd)

localrules: register_freebayes_single_sample

rule register_freebayes_single_sample:
	input:
		inp=config['OUTPUT_DIR']+'{sample}.{data_name}.host.vcf'
	output:
		flag=config['OUTPUT_DIR']+'{sample}.{data_name}.host.vcf.registered'
	params:
		conf_name=config['NAME'],
		sample_name='{sample}',
		data_name='{data_name}',
		exp_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['EXPERIMENT_NAME'],
		proj_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['PROJECT_NAME'],
	run:
		module = 'host_vcf'
		name = '{}_{}'.format(params.data_name, module)
		try:
			api.saveResult( name,
				module,
				[input.inp],
				params.data_name,
				params.conf_name,
				params.sample_name,
				params.exp_name,
				params.proj_name
			)
		except RecordExistsError:
			pass
		open(output.flag,'a').close()




