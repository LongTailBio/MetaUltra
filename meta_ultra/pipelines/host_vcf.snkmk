import meta_ultra.api as api

def host_vcf_output(wildcards):
        return standardOutputFileBuilder(hostVCFFlagPattern,
                                         DataType.SR_WMGS_DNA_SINGLE_END,
                                        DataType.SR_WMGS_DNA_PAIRED_END,
                                        DataType.LR_WMGS_ONT_DNA)

output_builders.append( host_vcf_output)

        
rule sort_bam:
    	input:
            	bam=hostBAM
	output:
		sortedbam=temp(hostVCFSortedBAMPattern)
	threads: 1
	params:
		samtools = config['SAMTOOLS']['EXC']['FILEPATH'],
		job_name=jobName('sort-host-bam')
	resources:
		time=int(config['HOST_VCF']['SORT_TIME']),
		n_gb_ram=int(config['HOST_VCF']['SORT_RAM'])
	run:
		cmd = '{params.samtools} sort -o $O0 $I0'
                cmd = loadFiles([input.bam], [output.sortedbam], cmd)
                shell(cmd)

localrules: read_group_bam

rule read_group_bam:
	input:
		bam=hostVCFSortedBAMPattern
	output:
		bam=hostVCFReadGroupBAMPattern
	threads: 1
	shell:
		'picard AddOrReplaceReadGroups -XX:ParallelGCThreads=1 I={input.bam} O={output.bam} RGLB=lib1 RGPL=illumina RGPU=unit1 RGSM=11'


rule freebayes_generate_regions:
	input:
                genome=config['HOST_VCF']['DB']['FILEPATH']
	output:
		main = temp(config['OUTPUT_DIR']+'{sample}.{data_name}.host.regions')
	threads: 1
	params:
                generate_regions= config['HOST_VCF']['GENERATE_REGIONS']['FILEPATH'],
		job_name=jobName('freebayes-regions')
	resources:
		time=int(config['HOST_VCF']['FREEBAYES_TIME']),
		n_gb_ram=int(config['HOST_VCF']['FREEBAYES_RAM'])
	run:
		cmd = '{params.generate_regions} $I0 100000 > $O0'
                cmd = loadFiles([input.genome +'.fai'], [output.main], cmd)
                shell(cmd)

                
rule freebayes_sample:
	input:
		bam=hostVCFReadGroupBAMPattern,
                genome=config['HOST_VCF']['DB']['FILEPATH'],
#                regions=config['OUTPUT_DIR']+'{sample}.{data_name}.host.regions'
	output:
		main = hostVCFPattern
	threads: 1
	version: config['HOST_VCF']['EXC']['VERSION']
	params:
		freebayespar = config['HOST_VCF']['EXC']['FILEPATH'],
                generate_regions= config['HOST_VCF']['GENERATE_REGIONS']['FILEPATH'],
		job_name=jobName('freebayes')
	resources:
		time=int(config['HOST_VCF']['FREEBAYES_TIME']),
		n_gb_ram=int(config['HOST_VCF']['FREEBAYES_RAM'])
	run:
		cmd = '{params.freebayespar} ' #$I1 {threads} '
                cmd += '-f $I0  $I1 > $O0'
                cmd = loadFiles([input.genome, input.bam], [output.main], cmd)
                shell(cmd)

localrules: register_freebayes

rule register_freebayes:
	input:
		inp=hostVCFPattern
	output:
		flag=hostVCFFlagPattern
	params:
		conf_name=config['NAME'],
		sample_name='{sample}',
		data_name='{data_name}',
		exp_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['EXPERIMENT_NAME'],
		proj_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['PROJECT_NAME'],
	run:
		module = 'host_vcf'
		name = '{}_{}'.format(params.data_name, module)
		try:
			api.saveResult( name,
				module,
				[input.inp],
				params.data_name,
				params.conf_name,
				params.sample_name,
				params.exp_name,
				params.proj_name
			)
		except RecordExistsError:
			pass
		open(output.flag,'a').close()




