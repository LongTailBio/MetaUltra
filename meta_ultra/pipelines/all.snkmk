import sys
import os.path
import os
from glob import glob
import meta_ultra.config as mup_config
from  meta_ultra.data_type import *
from  meta_ultra.sample_type import *

################################################################################
#
# Setup
#
################################################################################

if not os.path.isdir(config['OUTPUT_DIR']):
	os.mkdir(config['OUTPUT_DIR'])

output_builders = []

################################################################################
#
# I/O Utilities
#
################################################################################

def getReads(wildcards):
	reads = []
        sample = wildcards.sample
        dataRec = wildcards.data_name
        dataConf = config['SAMPLES'][sample][dataRec]
        dataType = DataType.asDataType(dataConf['DATA_TYPE'])
        if dataType == DataType.DNA_SEQ_SINGLE_END:
                reads.append(dataConf['1'])
	        
	elif dataType == DataType.DNA_SEQ_PAIRED_END:
                reads.append(dataConf['1'])
                reads.append(dataConf['2'])
		
	return reads

def getDataType(sampleName, dataName):
        dataConf = config['SAMPLES'][sampleName][dataName]
        dataType = DataType.asDataType(dataConf['DATA_TYPE'])
        return dataType

def getSampleType(sampleName, dataName):
        dataConf = config['SAMPLES'][sampleName][dataName]
        sampleType = SampleType.asSampleType(dataConf['SAMPLE_TYPE'])
        return sampleType


def all_input(wildcards):
	tools = config['TOOLS_TO_RUN']
	inp = []
	for output_builder in output_builders:
	    	inp += output_builder( wildcards)
	
	return inp

################################################################################
#
# I/O Utilities
#
################################################################################

snakefiles = glob(mup_config.pipeline_dir + '*.snkmk')
snakefiles.remove(mup_config.pipeline_dir + 'all.snkmk')

for snakefile in snakefiles:
    include: snakefile


rule all:
	input:
		all_input

