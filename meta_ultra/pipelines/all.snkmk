import sys
import os.path
import os
from glob import glob
import meta_ultra.config as mup_config
from  meta_ultra.data_type import *

################################################################################
#
# Setup
#
################################################################################

dataType = DataType.asDataType(config['DATA_TYPE'])
sys.stderr.write('Running with data type {}\n'.format(dataType))

if not os.path.isdir(config['OUTPUT_DIR']):
	os.mkdir(config['OUTPUT_DIR'])

output_builders = []

################################################################################
#
# I/O Utilities
#
################################################################################

def getReads(wildcards):
	reads = []
        if dataType == DataType.DNA_SEQ_SINGLE_END:
                reads.append(config['SAMPLES'][wildcards.sample]['1'])
	        
	elif dataType == DataType.DNA_SEQ_PAIRED_END:
                reads.append(config['SAMPLES'][wildcards.sample]['1'])
                reads.append(config['SAMPLES'][wildcards.sample]['2'])
		
	return reads

def getCleanReads(wildcards):
	reads = []
	reads.append(config['OUTPUT_DIR']+ wildcards.sample+'_nothost.fastq.gz')
	return reads


def all_input(wildcards):
	tools = config['TOOLS_TO_RUN']
	inp = []
	for output_builder in output_builders:
	    	inp += output_builder( wildcards)
	
	return inp

################################################################################
#
# I/O Utilities
#
################################################################################

snakefiles = glob(mup_config.pipeline_dir + '*.snkmk')
snakefiles.remove(mup_config.pipeline_dir + 'all.snkmk')

for snakefile in snakefiles:
    include: snakefile


rule all:
	input:
		all_input

