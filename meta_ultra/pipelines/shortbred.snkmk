

def shortbred_out(wildcards):
    	tools = config['TOOLS_TO_RUN']
    	inp = []
	if 'SHORTBRED' in tools:
		inp += expand(config['OUTPUT_DIR']+'{sample}.{data_name}.{db_name}'+config['SHORTBRED']['EXT'],
			      sample=config['SAMPLES'].keys(),
                              data_name=sum([dataConfs.keys() for dataConfs in config['SAMPLES'].values()])
			      db_name=config['SHORTBRED']['DBS'].keys()
                )
	return inp

output_builders.append(shortbred_out)

rule shortbred_single_sample:
	input:
		reads = getReads
	output: config['OUTPUT_DIR']+'{sample}.{data_name}.{db_name}'+config['SHORTBRED']['EXT']
	params:
		ref=lambda wildcards: config['SHORTBRED']['DBS'][wildcards.db_name],
		shortbred=config['SHORTBRED']['EXC'],
		tmp=config['TMP_DIR'],
		job_name=config['JOB_NAME_PREFIX'] + 'shortbred_single_sample_{sample}_{data_name}_{db_name}',
                data_name=lambda wildcards: wildcards.data_name,
                sample_name=lambda wildacrds: wildcards.sample
	threads: int(config['SHORTBRED']['THREADS'])
	version: config['SHORTBRED']['VERSION']
	resources:
		time=int(config['SHORTBRED']['TIME']),
		n_gb_ram=int(config['SHORTBRED']['RAM'])
	run:
                dataType = getDataType(params.sample_name, params.data_name)
		if dataType == DataType.WGS_DNA_SEQ_PAIRED_END:
			cmd = '{params.shortbred} --markers {params.ref} --wgs {input.reads[0]} {input.reads[1]} '
			cmd += '--results {output} --threads {threads} --tmp {params.tmp}'
		elif dataType == DataType.WGS_DNA_SEQ_SINGLE_END:
			cmd = '{params.shortbred} --markers {params.ref} --wgs {input.reads[0]} '
			cmd += '--results {output} --threads {threads} --tmp {params.tmp}'
		shell(cmd)

