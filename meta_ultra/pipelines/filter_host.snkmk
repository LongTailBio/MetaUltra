import meta_ultra.api as api


def filter_host_out(wildcards):
    return standardOutputFileBuilder(hostFlagPattern,
	                                    DataType.SR_WMGS_DNA_SINGLE_END,
                                        DataType.SR_WMGS_DNA_PAIRED_END,
                                        DataType.LR_WMGS_ONT_DNA)

output_builders.append(filter_host_out)

rule filter_host_single_end:
	input:
		reads = getReads
	output:
		host = hostSingleReads,
		nothost = notHostSingleReads,
		bam=temp(hostBAM),
	params:
		bt2=config['BOWTIE2']['EXC']['FILEPATH'],
                bwa=confValOrNone('BWA', 'EXC', 'FILEPATH'),
		job_name=jobName('filter-host-se', wc.sample, wc.data_name),
		data_name=lambda wildcards: wildcards.data_name,
		sample_name=lambda wildcards: wildcards.sample,
                db = config['FILTER_HOST']['DB']['FILEPATH'],
                bwa_db = confValOrNone( 'FILTER_HOST', 'BWA_DB', 'FILEPATH')
	threads: int(config['FILTER_HOST']['THREADS'])
	resources:
		time=int(config['FILTER_HOST']['TIME']),
		n_gb_ram=int(config['FILTER_HOST']['RAM'])
	run:
		dataType = getDataType(params.sample_name, params.data_name)
		if dataType == DataType.SR_WMGS_DNA_SINGLE_END:
                        db = glob(params.db+'*')
                        dbname = os.path.basename(params.db)
			cmd = ' {params.bt2} -p {threads} --very-fast '
			cmd += ' --al-gz $O0 '
			cmd += ' --un-gz $O1 '
			cmd += ' -x ${{TMPDIR}}/'+dbname+' -U $I0 | samtools view -F 4 -b > $O2 '
			cmd = loadFiles([input.reads[0]]+db,
					[output.host, output.nothost, output.bam],
					cmd)
                elif dataType == DataType.LR_WMGS_ONT_DNA:
                        db = glob(params.bwa_db+'*')
                        dbname = os.path.basename(params.bwa_db)
                        cmd = ('{params.bwa} mem -x ont2d -t {threads} ${{TMPDIR}}/'+dbname+' ${{I0}} '
                               '| samtools view -F 4 -b > ${{O0}} && '
                               '{params.split_script} ${{O0}} ${{O1}} ${{O2}} ')
                        cmd = loadFiles([input.reads[0]] + bwa_db,
                                        [output.bam, output.host, output.nothost],
                                        cmd)

		shell(cmd)


rule filter_host_paired_end:
	input:
		reads = getReads,

	output:
		host1 = hostPaired1Reads,
                host2 = hostPaired2Reads,
		nothost1 = notHostPaired1Reads,
                nothost2 = notHostPaired2Reads,
		bam=temp(hostBAM)
	params:
		db = config['FILTER_HOST']['DB']['FILEPATH'],
	    	bt2=config['BOWTIE2']['EXC']['FILEPATH'],
		job_name=jobName('filter-host-pe', wc.sample, wc.data_name),
		data_name=lambda wildcards: wildcards.data_name,
		sample_name=lambda wildcards: wildcards.sample
	threads: int(config['FILTER_HOST']['THREADS'])
	resources:
		time=int(config['FILTER_HOST']['TIME']),
		n_gb_ram=int(config['FILTER_HOST']['RAM'])
	run:
		dataType = getDataType(params.sample_name, params.data_name)
                db = glob(params.db+'*')
                dbname = os.path.basename(params.db)

		if dataType == DataType.WGS_DNA_SEQ_PAIRED_END:
			cmd = ' {params.bt2} -p {threads} --very-fast '
			cmd += ' --al-conc-gz ${{TMPDIR}}/'
                        cmd += params.sample_name+'.'+params.data_name+'_host_%.fastq.gz '
			cmd += ' --un-conc-gz ${{TMPDIR}}/'
                        cmd += params.sample_name+'.'+params.data_name+'_not-host_%.fastq.gz '
			cmd += ' -x ${{TMPDIR}}/'+dbname+' -1 $I0 -2 $I1 | samtools view -F 4 -b > $O4 '
			cmd = loadFiles([input.reads[0], input.reads[1]]+db,
					[output.host1,
                                         output.host2,
                                         output.nothost1,
                                         output.nothost2,
                                         output.bam],
					cmd)

		shell(cmd)

		
localrules: flag_filter_host_complete

rule flag_filter_host_complete:
	input:
		host=getHostReads,
		nothost=getNotHostReads
	output:
		flag=finalPattern
	params:
		sample_name='{sample}',
		data_name='{data_name}',
	run:
		open(output.flag,'a').close()
