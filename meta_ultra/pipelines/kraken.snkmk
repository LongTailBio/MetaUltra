import meta_ultra.api as api

def kraken_output(wildcards):
	tools = config['TOOLS_TO_RUN']
	inp = []
	dataSamplePairs=[]
	for sampleName, dataRecords in config['SAMPLES'].items():
		for dataName, dataConf in dataRecords.items():
			dataType = DataType.asDataType(dataConf['DATA_TYPE'])
			if dataType in [DataType.WGS_DNA_SEQ_SINGLE_END, DataType.WGS_DNA_SEQ_PAIRED_END]:
				dataSamplePairs.append( (sampleName, dataConf['DATA_NAME']))

	if 'KRAKEN' in tools:
		pattern = config['OUTPUT_DIR']+'{sample}.{data_name}.'+config['KRAKEN']['MPA_EXT']+'.registered'
		for sample, data in dataSamplePairs:
			inp.append( pattern.format(sample=sample, data_name=data))
	return inp

output_builders.append( kraken_output)

# Kraken
rule kraken_raw_single_sample:
	input:
		reads = getReads
	output:
		main = temp(config['OUTPUT_DIR']+'{sample}.{data_name}.' + config['KRAKEN']['RAW_EXT'])
	threads: int( config['KRAKEN']['THREADS'])
	version: config['KRAKEN']['EXC']['VERSION']
	params:
		kraken = config['KRAKEN']['EXC']['FILEPATH'],
		db = config['KRAKEN']['DB']['FILEPATH'],
		job_name=config['JOB_NAME_PREFIX'] + 'kraken_raw_single_sample_{sample}_{data_name}',
		data_type = lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['DATA_TYPE'] 
	resources:
		time=int(config['KRAKEN']['TIME']),
		n_gb_ram=int(config['KRAKEN']['RAM'])
	run:
		dataType = DataType.asDataType(params.data_type)
		if dataType == DataType.WGS_DNA_SEQ_PAIRED_END:
			cmd = '{params.kraken} --gzip-compressed --fastq-input --threads {threads} '
			cmd += '--paired --preload --db {params.db} $I0 $I1 > $O0'
			cmd = loadFiles([input.reads[0], input.reads[1]], [output.main], cmd)
		elif dataType == DataType.WGS_DNA_SEQ_SINGLE_END:
			cmd = '{params.kraken} --gzip-compressed --fastq-input --threads {threads} '
			cmd += '--preload --db {params.db} $I0 > $O0'
			cmd = loadFiles([input.reads[0]], [output.main], cmd)
		shell(cmd)


rule kraken_mpa_single:
	input:
		raw = config['OUTPUT_DIR']+'{sample}.{data_name}.' + config['KRAKEN']['RAW_EXT']
	output:
		main = config['OUTPUT_DIR']+'{sample}.{data_name}.' + config['KRAKEN']['MPA_EXT']
	threads: 1
	version: config['KRAKEN']['MPA_EXC']['VERSION']
	params:
		kraken_mpa = config['KRAKEN']['MPA_EXC']['FILEPATH'],
		db = config['KRAKEN']['DB']['FILEPATH'],
		job_name=config['JOB_NAME_PREFIX'] + 'kraken_mpa_single_{sample}_{data_name}'
	resources:
		time=int(config['KRAKEN']['MPA_TIME']),
		n_gb_ram=int(config['KRAKEN']['MPA_RAM'])
	shell:
		'{params.kraken_mpa} {input.raw} --db {params.db} > {output.main}'

localrules: register_kraken_mpa_single

rule register_kraken_mpa_single:
	input:
		inp=config['OUTPUT_DIR']+'{sample}.{data_name}.' + config['KRAKEN']['MPA_EXT']
	output:
		flag=config['OUTPUT_DIR']+'{sample}.{data_name}.' + config['KRAKEN']['MPA_EXT'] + '.registered'
	params:
		conf_name=config['NAME'],
		sample_name='{sample}',
		data_name='{data_name}',
		exp_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['EXPERIMENT_NAME'],
		proj_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['PROJECT_NAME'],
	run:
		module = 'kraken'
		name = '{}_{}'.format(params.data_name, module)
		api.saveResult( name,
				module,
				[input.inp],
				params.data_name,
				params.conf_name,
				params.sample_name,
				params.exp_name,
				params.proj_name
		)
		open(output.flag,'a').close()




