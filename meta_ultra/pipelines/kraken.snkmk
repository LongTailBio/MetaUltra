

def kraken_output(wildcards):
	tools = config['TOOLS_TO_RUN']
	inp = []
	if 'KRAKEN' in tools:
		inp += expand(config['OUTPUT_DIR']+'{sample}'+config['KRAKEN']['MPA_EXT'], sample=config['SAMPLES'].keys())
	return inp

output_builders.append( kraken_output)

# Kraken
rule kraken_raw_single_sample:
	input:
		reads = getCleanReads
	output:
		main = temp(config['OUTPUT_DIR']+'{sample}' + config['KRAKEN']['RAW_EXT'])
	threads: int( config['KRAKEN']['THREADS'])
	version: config['KRAKEN']['VERSION']
	params:
		kraken = config['KRAKEN']['EXC'],
		db = config['KRAKEN']['DB'],
		job_name=config['JOB_NAME_PREFIX'] + 'kraken_raw_single_sample'
	resources:
		time=int(config['KRAKEN']['TIME']),
		n_gb_ram=int(config['KRAKEN']['RAM'])
	run:
		if paired:
			cmd = '{params.kraken} --gzip-compressed --fastq-input --threads {threads} '
			cmd += '--paired --preload --db {params.db} {input.reads[0]} {input.reads[1]} > {output.main}'
		else:
			cmd = '{params.kraken} --gzip-compressed --fastq-input --threads {threads} '
			cmd += '--preload --db {params.db} {input.reads[0]} > {output.main}'
		shell(cmd)


rule kraken_mpa_single:
	input:
		raw = config['OUTPUT_DIR']+'{sample}' + config['KRAKEN']['RAW_EXT']
	output:
		main = config['OUTPUT_DIR']+'{sample}' + config['KRAKEN']['MPA_EXT']
	threads: 1
	version: config['KRAKEN']['VERSION']
	params:
		kraken_mpa = config['KRAKEN']['MPA_EXC'],
		db = config['KRAKEN']['DB'],
		job_name=config['JOB_NAME_PREFIX'] + 'kraken_mpa_single'
	resources:
		time=int(config['KRAKEN']['MPA_TIME']),
		n_gb_ram=int(config['KRAKEN']['MPA_RAM'])
	shell:
		'{params.kraken_mpa} {input.raw} --db {params.db} > {output.main}'

