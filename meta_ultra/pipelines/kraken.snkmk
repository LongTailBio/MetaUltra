import meta_ultra.api as api

krakenRawPattern = prependOutputDir('{sample}.{data_name}.' + config['KRAKEN']['RAW_EXT'])
krakenPattern = prependOutputDir('{sample}.{data_name}.'+config['KRAKEN']['MPA_EXT'])
finalPattern = krakenPattern + '.registered'

def kraken_output(wildcards):

	dataSamplePairs= getDataSamplePairs(DataType.SR_WMGS_DNA_SINGLE_END,
                                            DataType.SR_WMGS_DNA_PAIRED_END,
                                            DataType.LR_WMGS_ONT_DNA)
	inp = []
	for sample, data in dataSamplePairs:
                oFile = finalPattern.format(sample=sample, data_name=data)
		inp.append( oFile)
                
	return inp

output_builders.append( kraken_output)

# Kraken
rule kraken_raw_single_sample:
	input:
		reads = getNotHostReads
	output:
		main = temp( krakenRawPattern)
	threads: int( config['KRAKEN']['THREADS'])
	version: config['KRAKEN']['EXC']['VERSION']
	params:
		kraken = config['KRAKEN']['EXC']['FILEPATH'],
		db = config['KRAKEN']['DB']['FILEPATH'],
		job_name=jobName('kraken', wc.sample, wc.data_name),
		data_type = lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['DATA_TYPE'] 
	resources:
		time=int(config['KRAKEN']['TIME']),
		n_gb_ram=int(config['KRAKEN']['RAM'])
	run:
		dataType = DataType.asDataType(params.data_type)
		if dataType == DataType.WGS_DNA_SEQ_PAIRED_END:
			cmd = '{params.kraken} --gzip-compressed --fastq-input --threads {threads} '
			cmd += '--paired --preload --db {params.db} $I0 $I1 > $O0'
			cmd = loadFiles([input.reads[0], input.reads[1]], [output.main], cmd)
		elif dataType in [DataType.SR_WMGS_DNA_SINGLE_END,
                                  DataType.LR_WMGS_ONT_DNA]:
			cmd = '{params.kraken} --gzip-compressed --fastq-input --threads {threads} '
			cmd += '--preload --db {params.db} $I0 > $O0'
			cmd = loadFiles([input.reads[0]], [output.main], cmd)
		shell(cmd)


rule kraken_mpa_single:
	input:
		raw = krakenRawPattern
	output:
		main = krakenPattern
	threads: 1
	version: config['KRAKEN']['MPA_EXC']['VERSION']
	params:
		kraken_mpa = config['KRAKEN']['MPA_EXC']['FILEPATH'],
		db = config['KRAKEN']['DB']['FILEPATH'],
		job_name=jobName('kraken-mpa')
	resources:
		time=int(config['KRAKEN']['MPA_TIME']),
		n_gb_ram=int(config['KRAKEN']['MPA_RAM'])
	shell:
		'{params.kraken_mpa} {input.raw} --db {params.db} > {output.main}'

localrules: register_kraken_mpa_single

rule register_kraken_mpa_single:
	input:
		inp=krakenPattern
	output:
		flag=finalPattern
	params:
		conf_name=config['NAME'],
		sample_name='{sample}',
		data_name='{data_name}',
		exp_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['EXPERIMENT_NAME'],
		proj_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['PROJECT_NAME'],
	run:
		module = 'kraken'
		name = '{}_{}'.format(params.data_name, module)
		try:
			api.saveResult( name,
				module,
				[input.inp],
				params.data_name,
				params.conf_name,
				params.sample_name,
				params.exp_name,
				params.proj_name
			)
		except RecordExistsError:
			pass
		open(output.flag,'a').close()




