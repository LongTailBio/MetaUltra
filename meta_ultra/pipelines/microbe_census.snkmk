import meta_ultra.api as api

def microbe_census_output(wildcards):
	tools = config['TOOLS_TO_RUN']
	inp = []
	dataNames = []
	for sampleName, dataRecords in config['SAMPLES'].items():
		for dataName, dataConf in dataRecords.items():
			dataNames.append((sampleName, dataName))

	if 'MICROBE_CENSUS' in tools:
                pattern = config['OUTPUT_DIR']+'{sample}.{data_name}.'+config['MICROBE_CENSUS']['EXT']+'.json.registered'
                for sample, data in dataNames:
                        inp.append( pattern.format(sample=sample, data_name=data))

	return inp

output_builders.append( microbe_census_output)

# MicrobeCensus
rule microbe_census_single:
	input:
		reads = getReads
	output:
		main = config['OUTPUT_DIR']+'{sample}.{data_name}.' + config['MICROBE_CENSUS']['EXT']
	threads: int( config['MICROBE_CENSUS']['THREADS'])
	version: config['MICROBE_CENSUS']['EXC']['VERSION']
	params:
		mic_census = config['MICROBE_CENSUS']['EXC']['FILEPATH'],
		job_name=config['JOB_NAME_PREFIX'] + 'mic_census_single_{sample}_{data_name}'
	resources:
		time=int(config['MICROBE_CENSUS']['TIME']),
		n_gb_ram=int(config['MICROBE_CENSUS']['RAM'])
	run:

		dataType = getDataType(params.sample_name, params.data_name)
		if  dataType == DataType.WGS_DNA_SEQ_PAIRED_END:
			cmd='{params.mic_census} -t {threads} ${{I0}},${{I1}} ${{O0}}'
			cmd=loadFiles([input.reads[0], input.reads[1]],[output.main], cmd, 'TMPDIR')
		elif  dataType == DataType.WGS_DNA_SEQ_SINGLE_END:
			cmd='{params.mic_census} -t {threads} ${{I0}} ${{O0}}'
			cmd=loadFiles([input.reads[0]],[output.main], cmd, 'TMPDIR')
		shell(cmd)



rule microbe_census_to_json:
	input:
		inp=config['OUTPUT_DIR']+'{sample}.{data_name}.' + config['MICROBE_CENSUS']['EXT']
	output:
		out=config['OUTPUT_DIR']+'{sample}.{data_name}.' + config['MICROBE_CENSUS']['EXT'] +'.json'
	params:
		script=config['MICROBE_CENSUS']['JSON_SCRIPT']['FILEPATH']
	shell:
		'{params.script} {input.inp} > {output.out}'

rule register_microbe_census_json:
	input:
		inp=config['OUTPUT_DIR']+'{sample}.{data_name}.' + config['MICROBE_CENSUS']['EXT'] +'.json'
	output:
		flag=config['OUTPUT_DIR']+'{sample}.{data_name}.' + config['MICROBE_CENSUS']['EXT'] +'.json.registered'
	params:
		conf_name=config['NAME'],
		sample_name='{sample}',
		data_name='{data_name}',
		exp_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['EXPERIMENT_NAME'],
		proj_name=lambda wc: config['SAMPLES'][wc.sample][wc.data_name]['PROJECT_NAME'],
	run:
		module = 'microbe_census'
		name = '{}_{}'.format(params.data_name, module)
		api.saveResult( name,
				module,
				[input.inp],
				params.data_name,
				params.conf_name,
				params.sample_name,
				params.exp_name,
				params.proj_name
		)
		open(output.flag,'a').close()
